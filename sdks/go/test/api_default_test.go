/*
Kandji API

Testing DefaultAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_DefaultAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultAPIService ApiV1BlueprintsBlueprintIdAssignLibraryItemPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blueprintId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1BlueprintsBlueprintIdAssignLibraryItemPost(context.Background(), blueprintId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1BlueprintsBlueprintIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blueprintId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1BlueprintsBlueprintIdDelete(context.Background(), blueprintId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1BlueprintsBlueprintIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blueprintId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1BlueprintsBlueprintIdGet(context.Background(), blueprintId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1BlueprintsBlueprintIdListLibraryItemsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blueprintId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1BlueprintsBlueprintIdListLibraryItemsGet(context.Background(), blueprintId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1BlueprintsBlueprintIdOtaEnrollmentProfileGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blueprintId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1BlueprintsBlueprintIdOtaEnrollmentProfileGet(context.Background(), blueprintId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1BlueprintsBlueprintIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blueprintId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1BlueprintsBlueprintIdPatch(context.Background(), blueprintId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1BlueprintsBlueprintIdRemoveLibraryItemPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blueprintId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1BlueprintsBlueprintIdRemoveLibraryItemPost(context.Background(), blueprintId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1BlueprintsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1BlueprintsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1BlueprintsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1BlueprintsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1BlueprintsTemplatesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1BlueprintsTemplatesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdActionBlankpushPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdActionBlankpushPost(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdActionClearpasscodePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdActionClearpasscodePost(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdActionDeleteuserPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdActionDeleteuserPost(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdActionDisablelostmodePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdActionDisablelostmodePost(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdActionEnablelostmodePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdActionEnablelostmodePost(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdActionErasePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdActionErasePost(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdActionLockPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdActionLockPost(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdActionPlaylostmodesoundPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdActionPlaylostmodesoundPost(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdActionReinstallagentPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdActionReinstallagentPost(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdActionRemotedesktopPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdActionRemotedesktopPost(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdActionRenewmdmprofilePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdActionRenewmdmprofilePost(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdActionRestartPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdActionRestartPost(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdActionSetnamePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdActionSetnamePost(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdActionShutdownPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdActionShutdownPost(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdActionUnlockaccountPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdActionUnlockaccountPost(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdActionUpdateinventoryPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdActionUpdateinventoryPost(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdActionUpdatelocationPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdActionUpdatelocationPost(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdActivitylimit300Get", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdActivitylimit300Get(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdAppsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdAppsGet(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdCommandslimit300Get", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdCommandslimit300Get(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdDelete(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdDetailsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdDetailsGet(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdDetailsLostmodeDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdDetailsLostmodeDelete(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdDetailsLostmodeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdDetailsLostmodeGet(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdGet(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdLibraryItemsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdLibraryItemsGet(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdNotesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdNotesGet(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdNotesNoteIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string
		var noteId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdNotesNoteIdDelete(context.Background(), deviceId, noteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdNotesNoteIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string
		var noteId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdNotesNoteIdGet(context.Background(), deviceId, noteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdNotesNoteIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string
		var noteId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdNotesNoteIdPatch(context.Background(), deviceId, noteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdNotesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdNotesPost(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdParametersGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdParametersGet(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdPatch(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdSecretsBypasscodeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdSecretsBypasscodeGet(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdSecretsFilevaultkeyGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdSecretsFilevaultkeyGet(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdSecretsRecoverypasswordGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdSecretsRecoverypasswordGet(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdSecretsUnlockpinGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdSecretsUnlockpinGet(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1DevicesDeviceIdStatusGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1DevicesDeviceIdStatusGet(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1Deviceslimit300Get", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1Deviceslimit300Get(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1IntegrationsAppleAdeAdeTokenIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var adeTokenId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1IntegrationsAppleAdeAdeTokenIdDelete(context.Background(), adeTokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1IntegrationsAppleAdeAdeTokenIdDevicesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var adeTokenId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1IntegrationsAppleAdeAdeTokenIdDevicesGet(context.Background(), adeTokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1IntegrationsAppleAdeAdeTokenIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var adeTokenId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1IntegrationsAppleAdeAdeTokenIdGet(context.Background(), adeTokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1IntegrationsAppleAdeAdeTokenIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var adeTokenId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1IntegrationsAppleAdeAdeTokenIdPatch(context.Background(), adeTokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1IntegrationsAppleAdeAdeTokenIdRenewPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var adeTokenId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1IntegrationsAppleAdeAdeTokenIdRenewPost(context.Background(), adeTokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1IntegrationsAppleAdeDevicesDeviceIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1IntegrationsAppleAdeDevicesDeviceIdGet(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1IntegrationsAppleAdeDevicesDeviceIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deviceId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1IntegrationsAppleAdeDevicesDeviceIdPatch(context.Background(), deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1IntegrationsAppleAdeDevicesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1IntegrationsAppleAdeDevicesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1IntegrationsAppleAdeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1IntegrationsAppleAdeGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1IntegrationsAppleAdePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1IntegrationsAppleAdePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1IntegrationsAppleAdePublicKeyGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1IntegrationsAppleAdePublicKeyGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1LibraryCustomAppsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1LibraryCustomAppsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1LibraryCustomAppsLibraryItemIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var libraryItemId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1LibraryCustomAppsLibraryItemIdDelete(context.Background(), libraryItemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1LibraryCustomAppsLibraryItemIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var libraryItemId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1LibraryCustomAppsLibraryItemIdGet(context.Background(), libraryItemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1LibraryCustomAppsLibraryItemIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var libraryItemId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1LibraryCustomAppsLibraryItemIdPatch(context.Background(), libraryItemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1LibraryCustomAppsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1LibraryCustomAppsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1LibraryCustomAppsUploadPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1LibraryCustomAppsUploadPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1LibraryCustomProfilesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1LibraryCustomProfilesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1LibraryCustomProfilesLibraryItemIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var libraryItemId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1LibraryCustomProfilesLibraryItemIdDelete(context.Background(), libraryItemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1LibraryCustomProfilesLibraryItemIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var libraryItemId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1LibraryCustomProfilesLibraryItemIdGet(context.Background(), libraryItemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1LibraryCustomProfilesLibraryItemIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var libraryItemId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1LibraryCustomProfilesLibraryItemIdPatch(context.Background(), libraryItemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1LibraryCustomProfilesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1LibraryCustomProfilesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1LibraryCustomScriptsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1LibraryCustomScriptsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1LibraryCustomScriptsLibraryItemIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var libraryItemId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1LibraryCustomScriptsLibraryItemIdDelete(context.Background(), libraryItemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1LibraryCustomScriptsLibraryItemIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var libraryItemId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1LibraryCustomScriptsLibraryItemIdGet(context.Background(), libraryItemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1LibraryCustomScriptsLibraryItemIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var libraryItemId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1LibraryCustomScriptsLibraryItemIdPatch(context.Background(), libraryItemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1LibraryCustomScriptsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1LibraryCustomScriptsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1LibraryLibraryItemsLibraryItemIdActivityGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var libraryItemId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1LibraryLibraryItemsLibraryItemIdActivityGet(context.Background(), libraryItemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1LibraryLibraryItemsLibraryItemIdStatusGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var libraryItemId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1LibraryLibraryItemsLibraryItemIdStatusGet(context.Background(), libraryItemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1PrismActivationLockGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1PrismActivationLockGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1PrismApplicationFirewallGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1PrismApplicationFirewallGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1PrismAppsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1PrismAppsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1PrismCertificatesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1PrismCertificatesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1PrismCountcategoryappsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1PrismCountcategoryappsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1PrismDesktopAndScreensaverGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1PrismDesktopAndScreensaverGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1PrismDeviceInformationGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1PrismDeviceInformationGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1PrismExportExportIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var exportId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1PrismExportExportIdGet(context.Background(), exportId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1PrismExportPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1PrismExportPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1PrismFilevaultGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1PrismFilevaultGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1PrismGatekeeperAndXprotectGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1PrismGatekeeperAndXprotectGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1PrismInstalledProfilesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1PrismInstalledProfilesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1PrismKernelExtensionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1PrismKernelExtensionsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1PrismLaunchAgentsAndDaemonsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1PrismLaunchAgentsAndDaemonsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1PrismLocalUsersGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1PrismLocalUsersGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1PrismStartupSettingsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1PrismStartupSettingsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1PrismSystemExtensionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1PrismSystemExtensionsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1PrismTransparencyDatabaseGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1PrismTransparencyDatabaseGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1SelfServiceCategoriesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1SelfServiceCategoriesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1SettingsLicensingGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1SettingsLicensingGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1TagsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1TagsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1TagsTagIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tagId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1TagsTagIdDelete(context.Background(), tagId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1TagsTagIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tagId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1TagsTagIdPatch(context.Background(), tagId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1TagssearchaccuhiveGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1TagssearchaccuhiveGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1ThreatDetailsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1ThreatDetailsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1UsersGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1UsersGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiV1UsersUserIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiV1UsersUserIdGet(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PostUrlPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var postUrl string

		resp, httpRes, err := apiClient.DefaultAPI.PostUrlPost(context.Background(), postUrl).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
